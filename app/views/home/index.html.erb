<!-- app/views/your_view.html.erb -->

<div id="overlay" class="overlay home"></div>
<div class="center-point"><%= image_tag 'logo-kids.png' %></div>
<div id="circles"></div>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    // モーダルの開閉状態を追跡する変数
    let isModalOpen = false;

    // 全てのモーダル要素を取得
    const modals = document.querySelectorAll('.modal');

    // 各モーダルのイベントを監視
    modals.forEach(modal => {
        modal.addEventListener('shown.bs.modal', function() {
            isModalOpen = true; // モーダルが開かれたらフラグをtrueに設定
        });
        modal.addEventListener('hidden.bs.modal', function() {
            isModalOpen = false; // モーダルが閉じられたらフラグをfalseに設定
        });
    });
    
    const numCircles = 5;
    const circleContainer = document.getElementById('circles');
    const radius = 100;
    const rotationSpeed = 0.1; // この値を変更することで回転速度が変わります
    const centerRotationSpeed = -0.1; // 中心の画像の回転速度（他の円とは逆方向）
    // 中心の画像を取得
    const centerPoint = document.querySelector('.center-point');
    centerPoint.dataset.angle = 0;
  
    // 各画像に対応するクラス名とaltテキスト
    const imageDetails = <%= raw(
      [
        {className: 'user-icon s-icon', path: asset_path('single-neutral.png'), alt: 'user'},
        
        {className: 'camera-icon s-icon', path: asset_path('camera-settings-focus.png'), alt: 'camera', id: 'cameraApp1'},
        {className: 'instagram-icon small-icon', path: asset_path('search-1.png'), alt: 'instagram'},
        {className: 'ad-icon small-icon', path: asset_path('shopping-advertising-duration-countdown.png'), alt: 'ad'},
        
        {className: 'ad-icon small-icon', path: asset_path('shopping-advertising-duration-countdown.png'), alt: 'ad'},
      ].to_json
    ) %>;
  
    for (let i = 0; i < numCircles; i++) {
      const angle = (i * 360) / numCircles;
      const circle = document.createElement('div');
      circle.className = 'rotating-circle';
      circle.dataset.angle = angle;
      setCirclePosition(circle, radius, angle);
  
      const img = document.createElement('img');
  
      // 画像の詳細を取得
      const details = imageDetails[i];
      
      // 画像のパスを動的に設定
      img.src = details.path;
      
      img.alt = details.alt;
      img.className = details.className;
      if(details.id) img.id = details.id;
  
      circle.appendChild(img);
      circleContainer.appendChild(circle);
    }
  
    // 自動で回転させる
    setInterval(() => {
      Array.from(document.querySelectorAll('.rotating-circle')).forEach((circle, j) => {
        const currentAngle = parseFloat(circle.dataset.angle);
        const newAngle = currentAngle + rotationSpeed;
        setCirclePosition(circle, radius, newAngle);
        circle.dataset.angle = newAngle;
      });

      const currentCenterAngle = parseFloat(centerPoint.dataset.angle);
      const newCenterAngle = currentCenterAngle + centerRotationSpeed;
      centerPoint.dataset.angle = newCenterAngle;
      centerPoint.style.transform = `translate(-50%, -50%) rotate(${newCenterAngle}deg)`;
    }, 16); // 約60FPSで更新

    // スクロールで中心の画像を回転させる
    window.addEventListener('wheel', function(event) {
      if (isModalOpen) return; // モーダルが開いている場合は何もしない
      const scrollDelta = event.deltaY * 0.1; // スクロールの量に基づく回転量
      rotateCenterPoint(scrollDelta);
    });

    // ホイールで回転させる
    window.addEventListener('wheel', function(event) {
      if (isModalOpen) return; // モーダルが開いている場合は何もしない
      const scrollDelta = event.deltaY * 0.1;  // スクロールの方向と量
      Array.from(document.querySelectorAll('.rotating-circle')).forEach((circle) => {
        const currentAngle = parseFloat(circle.dataset.angle);
        const newAngle = currentAngle + scrollDelta;
        setCirclePosition(circle, radius, newAngle);
        circle.dataset.angle = newAngle;
      });
    });

    let initialTouchY = null;
    let touchVelocity = 0; // タッチによる回転速度
    const friction = 0.95; // 摩擦係数

    // タッチ開始時の処理
    window.addEventListener('touchstart', function(event) {
      if (isModalOpen) return; // モーダルが開いている場合は何もしない
      initialTouchY = event.touches[0].clientY;
    });

    // タッチ中の処理
    window.addEventListener('touchmove', function(event) {
      if (isModalOpen) return; // モーダルが開いている場合は何もしない
      if (initialTouchY === null) return;

      const touchY = event.touches[0].clientY;
      const touchDelta = initialTouchY - touchY;
      touchVelocity = touchDelta * 0.1; // タッチによる回転加速度を設定

      // 回転速度に基づいて更新
      updateCircles(touchVelocity);
      rotateCenterPoint(touchVelocity);

      initialTouchY = touchY;
    });

    // タッチ終了時の処理
    window.addEventListener('touchend', function() {
      if (isModalOpen) return; // モーダルが開いている場合は何もしない
      initialTouchY = null;
      animateDeceleration(); // 減速アニメーションを開始
    });

    function animateDeceleration() {
      if (Math.abs(touchVelocity) > 0.1) {
        updateCircles(touchVelocity);
        rotateCenterPoint(touchVelocity);
        touchVelocity *= friction; // 摩擦により速度を減少
        requestAnimationFrame(animateDeceleration);
      }
    }

    function updateCircles(delta) {
      Array.from(document.querySelectorAll('.rotating-circle')).forEach((circle) => {
        const currentAngle = parseFloat(circle.dataset.angle);
        const newAngle = currentAngle + delta;
        setCirclePosition(circle, radius, newAngle);
        circle.dataset.angle = newAngle;
      });
    }

    // 中心の画像を回転させる関数
    function rotateCenterPoint(delta) {
      const currentAngle = parseFloat(centerPoint.dataset.angle) || 0;
      const newAngle = currentAngle - delta;
      centerPoint.dataset.angle = newAngle;
      centerPoint.style.transform = `translate(-50%, -50%) rotate(${newAngle}deg)`;
    }
  
    function setCirclePosition(circle, r, a) {
      const x = r * Math.cos(a * Math.PI / 180);
      const y = r * Math.sin(a * Math.PI / 180);
      const centerX = window.innerWidth / 2;
      const centerY = window.innerHeight / 2;
      circle.style.left = `${centerX + x}px`;
      circle.style.top = `${centerY + y}px`;
      circle.style.transform = `rotate(${270-a}deg)`; 
    }

    const slides = document.querySelectorAll('.custom-slide');
    const indicators = document.querySelectorAll('.indicator');
    let currentIndex = 0; // 現在のスライドのインデックス

    function showSlide(index) {
      if (index < 0 || index >= slides.length) return; // 範囲外なら何もしない

      // 全てのスライドを非表示にする
      slides.forEach(slide => {
        slide.style.opacity = "0";
        slide.style.display = "none";
      });

      // 新しいスライドをフェードインで表示
      const newSlide = slides[index];
      newSlide.style.display = "block";
      newSlide.style.opacity = "1";

      // インジケーターの更新
      indicators[currentIndex].classList.remove('active'); // 現在のインジケーターからactiveを削除
      indicators[index].classList.add('active'); // 新しいインジケーターにactiveを追加
      currentIndex = index; // インデックスの更新
    }

    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        showSlide(index); // インジケーターがクリックされたら、対応するスライドを表示
      });
    });
  });
</script>

<div id="answerModal" class="modal fade" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-body answer-modal-body" id="answerModalBody" style="overflow: scroll;"></div>
    </div>
  </div>
</div>

<div id="cardContentModal" class="modal fade card-content" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen" role="document">
    <div class="modal-content" style="background-color: white;">
      <div class="modal-body card-modal-body" id="cardModalBody" style="overflow: scroll; background-color: white;">
        <div class="card-content-question"></div>
        <hr style="margin: 10% 5%;">
        <div id="customCarousel" class="custom-carousel">
          <div class="custom-carousel-inner">
            <div class="custom-slide answer-1 active" style="display: block;"></div>
            <div class="custom-slide answer-2" style="display: none;"></div>
            <div class="custom-slide answer-3" style="display: none;"></div>
          </div>
        </div>
      </div>
        <!-- インジケーター -->
        <div class="custom-indicators">
          <span class="indicator active" data-slide-to="0"></span>
          <span class="indicator" data-slide-to="1"></span>
          <span class="indicator" data-slide-to="2"></span>
        </div>
      <div class="modal-footer" style="height: auto;">

        <!-- その他のフッターコンテンツ -->
        <div class="like"></div>
        <div class="like-count"></div>
        <div class="bookmark"></div>
        <div class="bookmark-count"></div>
      </div>
    </div>
  </div>
</div>

<!-- カメラモーダル(撮影のみ) -->
<div class="modal fade simple-camera-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="overflow: hidden;">
  <div class="modal-dialog modal-fullscreen modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-body camera-modal-body" id="camera-modal-body" style="position: relative; height: 100%;">
        <video class="preview" style="position: absolute; top: 0; left: 0; right: 0; width: 100%; height: 100%; object-fit: cover; display: block;" autoplay></video>
        <%= render 'shared/light_dark_area' %>
        <%= render 'shared/resizable_rect' %>
        <div class="button-elements">
          <div class="outer-circle" style="position: absolute; bottom: 50px; left: 50%; transform: translateX(-50%);">
            <div class="inner-circle capture-button"></div>
          </div>
          <div class="return-button m-1">
            ←
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 画像トリミングモーダル -->
<div class="modal fade trimming-image-modal" id="trimmingImageModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="overflow: hidden;">
  <div class="modal-dialog modal-fullscreen modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-body image-modal-body" id="image-modal-body" style="position: relative; height: 100%;">
        <!-- 写真プレビュー表示エリア -->
        <img id="preview" class="preview" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%; object-fit: contain;">
        <%= render 'shared/light_dark_area' %>
        <%= render 'shared/resizable_rect' %>
        <!-- ここで撮影ボタンの位置を調整 -->
        <div class="outer-circle">
          <div class="inner-circle write-out-image"></div>
        </div>
        <div class="return-from-trimming">←</div>
      </div>
    </div>
  </div>
</div>

<%= render 'app/camera' %>

<%= render 'app/search' %>

<%= render 'app/folder', user_questions: @user_questions, liked_questions: @user_likes, saved_questions: @user_bookmarks %> 

<%= render 'app/instagram', all_cards: @all_cards, user_questions: @user_questions, user_likes: @user_likes, user_bookmarks: @user_bookmarks %>

<%= render 'app/write' %>

<style>


  .home {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
  }

  .center-point {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 150px;
    height: 150px;
    background-color: white;
    border-radius: 50%;
    z-index: 1;
    transform: translate(-50%, -50%);
    display: flex;
    justify-content: center; /* 水平方向の中央寄せ */
    align-items: center; /* 垂直方向の中央寄せ */
  }

  .center-point img {
    max-width: 100%; /* 画像がコンテナの幅より大きくならないようにする */
    max-height: 100%; /* 画像がコンテナの高さより大きくならないようにする */
    object-fit: contain; /* 画像のアスペクト比を保持しつつ、コンテナに収める */
  }

  .rotating-circle {
    position: absolute;
    width: 50px;
    height: 50px;
    background-color: white;
    border-radius: 50%;
    z-index: 0;
    margin-top: -25px;
    margin-left: -25px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .rotating-circle img {
    width: 70%; 
    height: auto;
    display: block;
    margin: auto; 
  }

  .fade-out {
    opacity: 0;
    transition: opacity 0.1s ease;
  }

  #cardContentModal {
      z-index: 1100 !important; 
  }

  .card-content-question {
    margin: 30px 10px 100px 10px;
  }

  .card-content-answer {
    margin: 0 10px 30px 10px;
  }

  .card-content .modal-footer {
    display: flex;
    justify-content: end;
    height: 40px;
  }

  .return-button {
    position: absolute;
    bottom: 50px;
    left: 25%;
    transform: translateX(-25%);
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 0 0 auto;
    
    width: 50px;
    height: 50px;
    background-color: transparent;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    cursor: pointer;
    border: none;
    color: white;
  }

  .return-button:hover {
    background-color: white; /* マウスが乗ったときの背景色 */
    color: black;
    transition: background-color 0.3s ease; /* 背景色変更のアニメーション */
  }

  .return-camera-from-write {
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 0 0 auto;
    background-color: transparent;
    transition: background-color 0.3s ease;
    cursor: pointer;
    position: relative; /* 追加 */
    border-radius:50%;
    border: solid 1px white; 
    width: 50px; 
    height: 50px;
    color: white;
  }

  .return-camera-from-write:hover {
    background-color: white; /* マウスが乗ったときの背景色 */
    color: black;
    transition: background-color 0.3s ease; /* 背景色変更のアニメーション */
  }

  /* カスタムカルーセルの基本スタイリング */
  .custom-carousel {
    /* position: relative; */
    overflow: hidden;
  }

  .custom-carousel-inner {
    /* position: relative; */
  }

  /* 各スライドのスタイリング */
  .custom-slide {
    top: 0;
    left: 0;
    width: 100%;
    transition: opacity 0.5s; /* フェード効果のためのアニメーション */
  }

  /* インジケーターのスタイリング */
  .custom-indicators {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .indicator {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: #888;
    margin: 0 4px;
    cursor: pointer;
    transition: width 0.3s, height 0.3s; /* アニメーションを追加 */
  }

  .indicator.active {
    width: 8px;
    height: 8px;
    background-color: #000;
  }
</style>
