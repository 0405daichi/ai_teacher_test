<!-- app/views/your_view.html.erb -->

<div id="overlay" class="overlay home"></div>
<div class="center-point"><%= image_tag 'logo-kids.png' %></div>
<div id="circles"></div>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    const numCircles = 5;
    const circleContainer = document.getElementById('circles');
    const radius = 100;
    const rotationSpeed = 0.1; // この値を変更することで回転速度が変わります
  
    // 各画像に対応するクラス名とaltテキスト
    const imageDetails = <%= raw(
      [
        {className: 'user-icon s-icon', path: asset_path('single-neutral.png'), alt: 'user'},
        
        {className: 'camera-icon s-icon', path: asset_path('camera-settings-focus.png'), alt: 'camera', id: 'cameraApp1'},
        {className: 'instagram-icon small-icon', path: asset_path('search-1.png'), alt: 'instagram'},
        {className: 'ad-icon small-icon', path: asset_path('shopping-advertising-duration-countdown.png'), alt: 'ad'},
        
        {className: 'ad-icon small-icon', path: asset_path('shopping-advertising-duration-countdown.png'), alt: 'ad'},
      ].to_json
    ) %>;
  
    for (let i = 0; i < numCircles; i++) {
      const angle = (i * 360) / numCircles;
      const circle = document.createElement('div');
      circle.className = 'rotating-circle';
      circle.dataset.angle = angle;
      setCirclePosition(circle, radius, angle);
  
      const img = document.createElement('img');
  
      // 画像の詳細を取得
      const details = imageDetails[i];
      
      // 画像のパスを動的に設定
      img.src = details.path;
      
      img.alt = details.alt;
      img.className = details.className;
      if(details.id) img.id = details.id;
  
      circle.appendChild(img);
      circleContainer.appendChild(circle);
    }
  
    // 自動で回転させる
    setInterval(() => {
      Array.from(document.querySelectorAll('.rotating-circle')).forEach((circle, j) => {
        const currentAngle = parseFloat(circle.dataset.angle);
        const newAngle = currentAngle + rotationSpeed;
        setCirclePosition(circle, radius, newAngle);
        circle.dataset.angle = newAngle;
      });
    }, 16); // 約60FPSで更新
  
    // 現存のコードに以下を追加

    // ホイールで回転させる
    window.addEventListener('wheel', function(event) {
      const scrollDelta = event.deltaY * 0.1;  // スクロールの方向と量
      Array.from(document.querySelectorAll('.rotating-circle')).forEach((circle) => {
        const currentAngle = parseFloat(circle.dataset.angle);
        const newAngle = currentAngle + scrollDelta;
        setCirclePosition(circle, radius, newAngle);
        circle.dataset.angle = newAngle;
      });
    });

    let initialTouchY = null;
    let touchVelocity = 0; // タッチによる回転速度
    const friction = 0.95; // 摩擦係数

    // タッチ中の処理
    window.addEventListener('touchmove', function(event) {
      if (initialTouchY === null) return;
      const touchY = event.touches[0].clientY;
      const touchDelta = (initialTouchY - touchY) * 0.5;
      initialTouchY = touchY;

      touchVelocity = touchDelta; // タッチによる回転速度を設定

      updateCircles(touchDelta);
    });

    // タッチ終了時の処理
    window.addEventListener('touchend', function() {
      initialTouchY = null;
      animateDeceleration(); // 減速アニメーションを開始
    });

    function animateDeceleration() {
      if (Math.abs(touchVelocity) > 0.1) {
        updateCircles(touchVelocity);
        touchVelocity *= friction; // 摩擦により速度を減少
        requestAnimationFrame(animateDeceleration);
      }
    }

    function updateCircles(delta) {
      Array.from(document.querySelectorAll('.rotating-circle')).forEach((circle) => {
        const currentAngle = parseFloat(circle.dataset.angle);
        const newAngle = currentAngle + delta;
        setCirclePosition(circle, radius, newAngle);
        circle.dataset.angle = newAngle;
      });
    }
  
    function setCirclePosition(circle, r, a) {
      const x = r * Math.cos(a * Math.PI / 180);
      const y = r * Math.sin(a * Math.PI / 180);
      const centerX = window.innerWidth / 2;
      const centerY = window.innerHeight / 2;
      circle.style.left = `${centerX + x}px`;
      circle.style.top = `${centerY + y}px`;
      circle.style.transform = `rotate(${270-a}deg)`; 
    }
  });
</script>

<style>


  .home {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
  }

  .center-point {
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 150px;
    height: 150px;
    background-color: white;
    border-radius: 50%;
    z-index: 1;
    transform: translate(-50%, -50%);
    display: flex;
    justify-content: center; /* 水平方向の中央寄せ */
    align-items: center; /* 垂直方向の中央寄せ */
    transform: translate(-50%, -50%) rotate(0deg);
    animation: rotateInfinite 50s linear infinite; /* 10秒で1回転、無限に繰り返す */
  }

  @keyframes rotateInfinite {
    from {
      transform: translate(-50%, -50%) rotate(0deg);
    }
    to {
      transform: translate(-50%, -50%) rotate(-360deg);
    }
  }

  .center-point img {
    max-width: 100%; /* 画像がコンテナの幅より大きくならないようにする */
    max-height: 100%; /* 画像がコンテナの高さより大きくならないようにする */
    object-fit: contain; /* 画像のアスペクト比を保持しつつ、コンテナに収める */
  }

  .rotating-circle {
    position: absolute;
    width: 50px;
    height: 50px;
    background-color: white;
    border-radius: 50%;
    z-index: 0;
    margin-top: -25px;
    margin-left: -25px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .rotating-circle img {
    width: 70%; 
    height: auto;
    display: block;
    margin: auto; 
  }

  .fade-out {
    opacity: 0;
    transition: opacity 0.1s ease;
  }

  #cardContentModal {
      z-index: 1100 !important; 
  }

  .card-content-question {
    margin: 30px 10px 100px 10px;
  }

  .card-content-answer {
    margin: 0 10px 30px 10px;
  }

  .card-content .modal-footer {
    display: flex;
    justify-content: end;
    height: 40px;
  }
</style>

<div id="answerModal" class="modal fade" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-body answer-modal-body" id="answerModalBody" style="overflow: scroll;"></div>
    </div>
  </div>
</div>

<div id="cardContentModal" class="modal fade card-content" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl" role="document">
    <div class="modal-content" style="background-color: white;">
      <div class="modal-body card-modal-body" id="cardModalBody" style="overflow: scroll; background-color: white;">
        <div class="card-content-question"></div>
        <hr style="margin: 10% 5%;">
        <div class="card-content-answer"></div>
      </div>
      <div class="modal-footer" style="height: auto;">
        <div class="like"></div>
        <div class="like-count"></div>
        <div class="bookmark"></div>
        <div class="bookmark-count"></div>
      </div>
    </div>
  </div>
</div>

<%= render 'app/camera' %>

<%= render 'app/search' %>

<%= render 'app/folder', user_questions: @user_questions, liked_questions: @user_likes, saved_questions: @user_bookmarks %> 

<%= render 'app/instagram', all_cards: @all_cards, user_questions: @user_questions, user_likes: @user_likes, user_bookmarks: @user_bookmarks %>

<%= render 'app/write' %>