<!-- カメラモーダル -->
<div class="modal fade cameraModal" id="cameraModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="overflow: hidden;">
  <div class="modal-dialog modal-fullscreen modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-body camera-modal-body" id="camera-modal-body" style="position: relative; height: 100%;">
        <!-- カメラプレビュー表示エリア -->
        <video class="preview" id="cameraPreview" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; width: 100%; height: 100%; object-fit: cover; display: block;" autoplay></video>
        <%= render 'shared/light_dark_area' %>
        <%= render 'shared/resizable_rect' %>
        <%= form_with url: "/questions/get_answer", local: true, id: "questionForm", class: "question-form-from-camera", method: :post do |f| %>
          <div id="option-panel">
            <div id="option-panel-elements">
              <hr style="margin: 40% 5% 10px 5%; background-color: #E8E8E8; opacity: 1; height: 2;">
              <%= f.file_field :image, class: 'hidden', class: 'hidden-question-image', style: 'display: none;' %>
              <%= f.hidden_field :option, class: "selected-option", value: "質問" %>
              <%= f.hidden_field :answer_type, class: "answer-type-id", value: 1 %>
              <div class="option-carousel">
                <% ['質問', '直訳・翻訳', '現代語訳・口語訳', '要約', '添削'].each_with_index do |option, index| %>
                  <div class="option <%= index.zero? ? 'active' : '' %>" data-option="<%= option %>">
                    <%= option %>
                  </div>
                <% end %>
              </div>
              <!-- 水平な直線とマージンを追加 -->
              <hr style="margin: 5% 5%; background-color: #E8E8E8; opacity: 1; height: 2;">
              <!-- 各オプション用の詳細要素 -->
              <div class="all-option-elements">
                <!-- 質問オプション用のコード -->
                <div class="how-to-answer">
                  <div class="container">
                    <% ['答えのみ', '解説付き', 'ヒント'].each_with_index do |option, index| %>
                      <div class="answerOption my-3 mx-1 <%= 'active' if index.zero? %>" data-option="<%= option %>" data-value="<%= index %>">
                        <%= f.hidden_field :answerType, value: index.zero? ? "onlyAnswer" : index == 1 ? "withExplain" : "hint", id: "answer_type_#{index}" %>
                        <%= option %>
                      </div>
                    <% end %>
                  </div>
                </div>
                <!-- 直訳・翻訳オプション用のコード -->
                <div class="translate">
                  <div class="selectLanguage">
                    <div class="container">
                      <div>
                        <%= f.select :fromLanguage, ['English', 'Japanese'], { selected: 'English' }, class: "form-select" %>
                      </div>
                      <div>
                        <button type="button" id="switchLanguage" class="switch-language">→</button>
                      </div>
                      <div>
                        <%= f.select :toLanguage, ['English', 'Japanese'], { selected: 'Japanese' }, class: "form-select" %>
                      </div>
                    </div>
                  </div>
                  <div class="how-to-translate">
                    <div class="container">
                      <% ['翻訳', '直訳'].each_with_index do |option, index| %>
                        <div class="translateOption my-3 mx-1 <%= 'active' if index.zero? %>" data-option="<%= option %>">
                          <%= f.hidden_field :translationType, value: index.zero? ? "translated" : "literal" %>
                          <%= option %>
                        </div>
                      <% end %>
                    </div>
                  </div>
                </div>
                <!-- 口語訳・現代語訳オプション用のコード -->
                <div class="ancient-translation-options" style="display: none;">
                  <div class="container">
                    <% ['現代語訳', '口語訳'].each_with_index do |option, index| %>
                      <div class="translate-ancient-option my-3 mx-1 <%= 'active' if index.zero? %>" data-option="<%= option %>">
                        <%= f.hidden_field :ancient_type, value: index.zero? ? "modern" : "colloquial" %>
                        <%= option %>
                      </div>
                    <% end %>
                  </div>
                  <div class="form-group">
                    <%= f.radio_button :option_select, 'no_image', class: 'no-image-option', checked: true %>
                    <%= f.label :option_select_no_image, '詳細を指定' %>
                  </div>
                  <div class="form-group">
                    <%= f.radio_button :option_select, 'other', class: 'other-option' %>
                    <%= f.label :option_select_other, '写真だけ' %>
                  </div>
                  <div class="no_image_options">
                    <div class="form-group">
                      <%= f.label :work_name, '作品名' %>
                      <%= f.text_field :work_name, class: 'form-control' %>
                    </div>
                    <div class="form-group">
                      <%= f.label :text_type, '種類' %>
                      <%= f.select :text_type, ['古文', '漢文'], {}, class: 'form-select' %>
                    </div>
                    <div class="no_image_button">
                      <button class="button btn btn-secondary">この内容で回答を得る</button>
                    </div>
                  </div>
                </div>
                <!-- 要約オプション用のコード -->
                <div class="wrap-up-options">
                  <div class="container">
                    <div class="wrap-up-option">
                      <%= f.select :delimiter, ['日本語', '英語'], { selected: '日本語' }, class: "form-select" %>
                    </div>
                    <div class="wrap-up-option">
                      <%= f.select :character_count, (100..800).step(100).to_a, { selected: 400 }, { class: "form-select", id: "character-count" } %>
                      <span id="character-count-text">（文字数）</span>
                      <%= f.select :word_count, (50..450).step(50).to_a, { selected: 250 }, { class: "form-select", id: "word-count", style: "display: none" } %>
                      <span id="word-count-text" style="display: none;">（単語数）</span>
                    </div>
                    <div class="wrap-up-option">
                      <%= f.select :comparison, ['以上', '以下', '程度'], { selected: '以下' }, { class: "form-select", id: "comparison" } %>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="circle-bg"></div>
          <!-- ボタン・入力内容 -->
          <div class="mb-3" id="questionModalButton" style="display: none;">
            <div class="d-flex scrollable-container position-relative" style="overflow: scroll;">
              <%= f.text_area :questionInputForm,
                                maxlength: "1800",
                                class: "form-control mr-2 border-0 scrollable-textarea question-input-form",
                                id: "questionInputForm",
                                placeholder: "問題や質問を入力してください。",
                                style: "resize: none; z-index: 10000; position: relative; display: none;" %>
              <div>
                <button type="button" class="btn btn-primary photoButton border-0">写真</button>
                <%= f.submit "Submit", class: "btn btn-primary" %>
                <button type="button" class="btn btn-secondary" id="closeQuestionButton">閉じる</button>
              </div>
            </div>
          </div>
        <% end %>
        <div class="button-elements">
          <button type="button" id="closeCamera" class="btn-close close-camera-modal" data-bs-dismiss="modal" aria-label="Close" style="position: absolute; top: 10px; right: 10px;"></button>
          <div class="outer-circle">
            <div id="captureButton" class="inner-circle"></div>
          </div>
          <!-- 入力ボタン -->
          <div id="writeButton" class="write-button">
            <svg xmlns="http://www.w3.org/2000/svg" width="3" height="3" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="0.8" stroke-linecap="round" stroke-linejoin="round" class="ai ai-Pencil"><path d="M4.333 16.048L16.57 3.81a2.56 2.56 0 0 1 3.62 3.619L7.951 19.667a2 2 0 0 1-1.022.547L3 21l.786-3.93a2 2 0 0 1 .547-1.022z"/><path d="M14.5 6.5l3 3"/></svg>
          </div>
          <div id="imageInputButtonFromCamera" class="image-input-button-from-camera">
            <%= render 'shared/svg/image' %>
            <input type="file" id="imageInput" class="image-input" style="display: none;" accept="image/*">
          </div>
        </div>
        <!-- 円 -->
        <div class="circle-quarter">
          <div class="gear">
            <%= render 'shared/svg/gear' %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<%# <script>
  let isPanelOpen = false;
  const cameraElement = document.querySelector('.cameraModal');
  const ancientTranslationOptions = cameraElement.querySelector('.ancient-translation-options');
  const workNameInput = ancientTranslationOptions.querySelector('input[name="work_name"]');
  const textTypeSelect = ancientTranslationOptions.querySelector('select[name="text_type"]');
  const otherRadioButton = ancientTranslationOptions.querySelector('input[name="option_select"][value="other"]');

  const otherOptionRadioButton = ancientTranslationOptions.querySelector('.other-option');
  const noImageOptionRadioButton = ancientTranslationOptions.querySelector('.no-image-option');
  const noImageOptions = ancientTranslationOptions.querySelector('.no_image_options');

  if (otherOptionRadioButton) {
    otherOptionRadioButton.addEventListener('change', () => {
      if (otherOptionRadioButton.checked) {
        noImageOptions.style.display = 'none';
      }
    });
  }

  if (noImageOptionRadioButton) {
    noImageOptionRadioButton.addEventListener('change', () => {
      if (noImageOptionRadioButton.checked) {
        noImageOptions.style.display = 'block';
      }
    });
  }
  
  document.querySelector('.circle-quarter').addEventListener('click', function() {
    const activeOptionElement = cameraElement.querySelector('.option-carousel .option.active');
    const isActiveOptionTranslation = activeOptionElement && activeOptionElement.dataset.option === '現代語訳・口語訳';

    if (isPanelOpen && isActiveOptionTranslation) {
      if (!otherRadioButton.checked) {
        if (!workNameInput.value || !textTypeSelect) {
          alert("作品名や種類を明確にして下さい。");
          return;
        }
      }
    }

    // this.classList.toggle('active'); // ボタン自身に activeクラスを付与し
    document.getElementById('option-panel').classList.toggle('panelactive'); // ナビゲーションに panelactiveクラスを付与
    isPanelOpen = !isPanelOpen;

    document.querySelector('.circle-bg').classList.toggle('circleactive'); // 丸背景に circleactiveクラスを付与

    // 歯車のクラスを切り替えてアニメーションを停止し、右に傾ける
    var gear = document.querySelector('.gear');
    gear.classList.toggle('rotateLeft');

    var svg = gear.querySelector('.ai-Gear'); // 必要なpath要素の正確なセレクター
    svg.classList.toggle('stroke-black');
  });
</script> %>
<style>
  .option-carousel {
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    height: calc(4 * 50px);
    scrollbar-width: none;
    -ms-overflow-style: none;

    scroll-snap-type: y mandatory;
    -webkit-overflow-scrolling: touch;
    scroll-padding: 50%;
    width: 100%;

    &::-webkit-scrollbar {
      display: none;  // Chrome
    }
  }

  .option-carousel .option {
    flex: 0 0 auto;
    scroll-snap-align: center;
    border-radius: 20px;
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease;
    cursor: pointer;
    color: black;
    background-color: transparent;
  }

  .option-carousel .option.active {
    background: #FFFCF3;
    color: black;
    border: solid 1px #E8E8E8;
  }

  .how-to-answer .container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .answerOption {
    flex: 0 0 auto;
    width: 50%;
    height: 30px;
    border-radius: 20px;
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease;
    cursor: pointer;
    color: black;
    background-color: transparent;
  }

  .answerOption.active {
    background: #FFFCF3;
    color: black;
    border: solid 1px #E8E8E8;
  }

  .how-to-translate .container {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .selectLanguage .container {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  /* セレクトボックスの基本的なスタイル */
  .form-select {
    appearance: none; /* デフォルトのブラウザスタイルをリセット */
    -webkit-appearance: none;
    -moz-appearance: none;
    background-color: #FFFCF3;
    border-radius: 10px;
    border: 1px solid #d1d1d1;
    font-size: 1rem;
    color: #333;
    cursor: pointer;
    transition: border 0.3s ease, background-color 0.3s ease;
  }

  /* セレクトボックスのドロップダウンリストの位置を調整 */
  .form-select option {
      position: relative;
      top: 0;
      left: 0;
  }

  /* セレクトボックスにホバーした時のスタイル */
  /* .form-select:hover {
    border-color: #007BFF;
    background-color: #FFFCF3;
  } */

  /* セレクトボックスのアイコン (矢印) をカスタマイズ */
  .form-select::after {
    content: "⌵"; /* 下向き矢印の文字を使用 */
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    font-size: 0.8rem;
    color: #666;
    pointer-events: none; /* クリックイベントを無効にする */
  }

  /* ボタンのスタイルを少し改善 */
  .switch-language {
    margin: 0 10px;
    background-color: #FFFCF3;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    cursor: pointer;
    border: solid 1px #E8E8E8;
    height: 50px;
    width: 50px;
  }

  .translateOption {
    flex: 0 0 auto;
    width: 50%;
    height: 30px;
    border-radius: 20px;
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease;
    cursor: pointer;
    color: black;
    background-color: transparent;
  }

  .translateOption.active {
    background: #FFFCF3;
    color: black;
    border: solid 1px #E8E8E8;
  }

  .ancient-translation-options .container {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .translate-ancient-option {
    flex: 0 0 auto;
    width: 50%;
    height: 30px;
    border-radius: 20px;
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease;
    cursor: pointer;
    color: black;
    background-color: transparent;
  }

  .translate-ancient-option.active {
    background: #FFFCF3;
    color: black;
    border: solid 1px #E8E8E8;
  }

  .no_image_button {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 25px;
  }

  .wrap-up-options .container {
    display: flex;
    justify-content: center;
    justify-content: space-around;
  }

  .wrap-up-option {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  /*========= ナビゲーションのためのCSS ===============*/

  .circle-quarter {
    width: 50px; /* 半分の幅で円を形成するため */
    height: 50px; /* 半分の高さで円を形成するため */
    background-color: transparent;
    /* transition: background-color 0.3s ease; */
    border-radius: 100% 0 0 0; /* 右下の四分の一円を形成するため */
    position: fixed;
    bottom: 10px; /* 画面の一番下に配置 */
    right: 10px; /* 画面の一番右に配置 */
    z-index: 999;
  }

  .circle-quarter:hover {
    background-color: transparent;
  }

  .gear {
    width: 50px;
    height: 50px;
    background-color: transparent;
    cursor: pointer;
    transition: transform 0.3s ease;
    animation: rotateRight 20s linear infinite; /* 右回転のアニメーションを適用 */
    animation-play-state: running;
  }

  /* 右回転のアニメーション */
  @keyframes rotateRight {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* 左回転のアニメーション */
  @keyframes rotateLeft {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(-360deg);
    }
  }

  .gear.rotateLeft {
    animation: rotateLeft 20s linear infinite;
  }


  .gear svg {
    position: absolute; /* 絶対位置指定 */
    right: 0;
    bottom: 0;
    width: 50px;
    height: 50px;
  }

  .stroke-black {
    stroke: black;
  }


  /* .op {
    position: absolute;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  } */

  #option-panel {
      position: fixed; /* 画面に固定 */
      overflow: hidden;
      /* max-height: 100vh; 画面の高さを超えないようにする */
      display: flex;
      justify-content: center;
      align-items: center;
      flex-flow: column;
  }

  /*アクティブになったエリア*/
  #option-panel.panelactive{
      z-index: 999;
      left: 0;
  }

  /*丸の拡大*/
  .circle-bg{
      position: fixed;
    z-index:3;
      /*丸の形*/
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: #F3F6FF;
      /*丸のスタート位置と形状*/
    transform: scale(0);/*scaleをはじめは0に*/
    right:-50px;
      bottom:-50px;
      transition: all .2s;/*0.6秒かけてアニメーション*/
  }

  .circle-bg.circleactive{
    transform: scale(60);/*クラスが付与されたらscaleを拡大*/
  }

  /*ナビゲーションの縦スクロール*/
  #option-panel-elements{
      display: none; /*はじめは表示なし*/
      z-index: 999;
      /* overflow: hidden; */
      -webkit-overflow-scrolling: touch;
      width: 100vw; /* 画面の幅に合わせる */
  }

  #option-panel.panelactive #option-panel-elements{
       display: block; /*クラスが付与されたら出現*/
  }

  /* .all-option-elements {
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
  } */

  /*ナビゲーション*/
  #option-panel ul {
    opacity: 0;/*はじめは透過0*/
      z-index: 999;
      width: 100%;
      height: 100vh;
  }

  /*背景が出現後にナビゲーションを表示*/
  #option-panel.panelactive ul {
      opacity:1;
  }

  /* 背景が出現後にナビゲーション li を表示※レイアウトによって調整してください。不必要なら削除*/
  #option-panel.panelactive ul li{
  animation-name:gnaviAnime;
  animation-duration:1s;
  animation-delay:1s;/*0.2 秒遅らせて出現*/
  animation-fill-mode:forwards;
  opacity:0;
  }
  @keyframes gnaviAnime{
  0% {
  opacity: 0;
  }
  100% {
  opacity: 1;
  }
  }

  .write-button {
    width: 50px;
    height: 50px;
    background-color: transparent;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    cursor: pointer;
    border: none;
    display: block;
    position: absolute;
    bottom: 80px;
    right: 10px;
    border: 1px solid white;
  }

  .write-button svg {
    position: absolute; /* 絶対位置指定 */
    top: 50%; /* 上部から50%の位置 */
    left: 50%; /* 左から50%の位置 */
    transform: translate(-50%, -50%); /* 中央に配置 */
    width: 60%; /* SVGのサイズ（必要に応じて調整） */
    height: 60%; /* SVGのサイズ（必要に応じて調整） */
  }

  .write-button:hover {
    background-color: white; /* マウスが乗ったときの背景色 */
    transition: background-color 0.3s ease; /* 背景色変更のアニメーション */
  }

  /* 通常状態でのSVGの線の色 */
  .write-button svg path {
    stroke: white; /* デフォルトは白色 */
    transition: stroke 0.3s ease; /* 線の色変更のアニメーション */
  }

  /* マウスが乗ったときのSVGの線の色 */
  .write-button:hover svg path {
    stroke: black; /* マウスが乗ったときは黒色 */
  }

  .image-input-button-from-camera {
    width: 50px;
    height: 50px;
    background-color: transparent;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    cursor: pointer;
    border: none;
    position: absolute;
    bottom: 150px;
    right: 10px;
    border: 1px solid white;
  }

  .image-input-button-from-camera svg {
    position: absolute; /* 絶対位置指定 */
    top: 50%; /* 上部から50%の位置 */
    left: 50%; /* 左から50%の位置 */
    transform: translate(-50%, -50%); /* 中央に配置 */
    width: 60%; /* SVGのサイズ（必要に応じて調整） */
    height: 60%; /* SVGのサイズ（必要に応じて調整） */
  }

  .image-input-button-from-camera:hover {
    background-color: white; /* マウスが乗ったときの背景色 */
    transition: background-color 0.3s ease; /* 背景色変更のアニメーション */
  }

  /* 通常状態でのSVGの線の色 */
  .image-input-button-from-camera svg path {
    stroke: white; /* デフォルトは白色 */
    transition: stroke 0.3s ease; /* 線の色変更のアニメーション */
  }

  /* マウスが乗ったときのSVGの線の色 */
  .image-input-button-from-camera:hover svg path {
    stroke: black; /* マウスが乗ったときは黒色 */
  }

  /* マウスが乗ったときのSVGの線の色 */
  .image-input-button-from-camera:hover svg circle {
    stroke: black; /* マウスが乗ったときは黒色 */
  }

  .outer-circle {
    width: 60px;
    height: 60px;
    background-color: rgba(245, 245, 245, 0.5); /* 淡い白色 */
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s;
    position: absolute;
    bottom: 50px;
    left: 50%;
    transform: translateX(-50%);
  }

  .inner-circle {
    width: 80%; /* 外側の円よりもかなり小さく */
    height: 80%; /* 外側の円よりもかなり小さく */
    background-color: white; /* 白色 */
    border-radius: 50%;
    transition: background-color 0.3s;
    margin: auto; /* 中央に自動的に配置 */
  }

  .inner-circle:hover {
    background-color: rgba(245, 245, 245, 0.5); /* ホバーが外れたら元の色に */
  }

  .return-from-trimming {
    position: absolute;
    bottom: 50px;
    left: 25%;
    transform: translateX(-25%);
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 0 0 auto;

    width: 50px;
    height: 50px;
    background-color: transparent;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    cursor: pointer;
    border: none;
    color: white;
  }

  .return-from-trimming:hover {
    background-color: white; /* マウスが乗ったときの背景色 */
    color: black;
    transition: background-color 0.3s ease; /* 背景色変更のアニメーション */
  }

  .return-from-trimming:hover svg {
    stroke: black;
  }
</style>
