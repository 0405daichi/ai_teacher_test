<!-- app/views/app/_instagram.html.erb -->

<!-- インスタグラムモーダル -->
<div class="modal fade instagramModal" id="instagram" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-fullscreen modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" id="closeSearch" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="position: absolute; top: 10px; right: 10px;"></button>
      </div>
      <div class="modal-body cards-panel-modal-body">
        <% if user_signed_in? %>
          <div class="cards-panel">
            <!-- 全てのカード -->
            <div class="cards all-cards" id="all-cards" style="display: block;">
              <% all_cards.each do |card| %>
                <div class="card" data-card-id="<%= card.id %>">
                  <div class="card-id" style="display:none;"><%= card.id %></div>
                    <div class="card-body">
                      <% if card.image.attached? %>
                        <%= image_tag card.image, style: "width: 100%; height: auto;" %> <!-- 画像があればここで表示 -->
                      <% else %>
                        <%= card.content %> <!-- 画像がなければコンテンツを表示 -->
                      <% end %>
                    </div>
                  <div class="card-bottom">
                    <div class="like">
                      <% if !card.likes.find_by(user: current_user) %>
                        <%= render 'shared/svg/like' %>
                      <% else %>
                        <%= render 'shared/svg/liked' %>
                      <% end %>
                    </div>
                    <div class="like-count"><%= card.likes.count %></div>
                    <div class="bookmark">
                      <% if !card.bookmarks.find_by(user: current_user) %>
                        <%= render 'shared/svg/bookmark' %>
                      <% else %>
                        <%= render 'shared/svg/bookmarked' %>
                      <% end %>
                    </div>
                    <div class="bookmark-count"><%= card.bookmarks.count %></div>
                  </div>
                </div>
              <% end %>
            </div>

            <!-- ユーザーのカード -->
            <% unless user_questions.empty? %>
              <div class="cards user-cards" id="user-cards">
                <% user_questions.each do |card| %>
                  <div class="card" data-card-id="<%= card.id %>">
                    <div class="card-id" style="display:none;"><%= card.id %></div>
                    <div class="card-body">
                      <% if card.image.attached? %>
                        <%= image_tag card.image, style: "width: 100%; height: auto;" %> <!-- 画像があればここで表示 -->
                      <% else %>
                        <%= card.content %> <!-- 画像がなければコンテンツを表示 -->
                      <% end %>
                    </div>
                    <div class="card-bottom">
                      <div class="like">
                        <% if !card.likes.find_by(user: current_user) %>
                          <%= render 'shared/svg/like' %>
                        <% else %>
                          <%= render 'shared/svg/liked' %>
                        <% end %>
                      </div>
                      <div class="like-count"><%= card.likes.count %></div>
                      <div class="bookmark">
                        <% if !card.bookmarks.find_by(user: current_user) %>
                          <%= render 'shared/svg/bookmark' %>
                        <% else %>
                          <%= render 'shared/svg/bookmarked' %>
                        <% end %>
                      </div>
                      <div class="bookmark-count"><%= card.bookmarks.count %></div>
                    </div>
                  </div>
                <% end %>
              </div>
            <% end %>
              
            <!-- ユーザーがいいねしたカード -->
            <% unless user_likes.empty? %>
              <div class="cards user-liked-cards" id="user-liked-cards">
                <% user_likes.each do |card| %>
                  <div class="card" data-card-id="<%= card.id %>">
                    <div class="card-id" style="display:none;"><%= card.id %></div>
                    <div class="card-body">
                      <% if card.image.attached? %>
                        <%= image_tag card.image, style: "width: 100%; height: auto;" %> <!-- 画像があればここで表示 -->
                      <% else %>
                        <%= card.content %> <!-- 画像がなければコンテンツを表示 -->
                      <% end %>
                    </div>
                    <div class="card-bottom">
                      <div class="like">
                        <% if !card.likes.find_by(user: current_user) %>
                          <%= render 'shared/svg/like' %>
                        <% else %>
                          <%= render 'shared/svg/liked' %>
                        <% end %>
                      </div>
                      <div class="like-count"><%= card.likes.count %></div>
                      <div class="bookmark">
                        <% if !card.bookmarks.find_by(user: current_user) %>
                          <%= render 'shared/svg/bookmark' %>
                        <% else %>
                          <%= render 'shared/svg/bookmarked' %>
                        <% end %>
                      </div>
                      <div class="bookmark-count"><%= card.bookmarks.count %></div>
                    </div>
                  </div>
                <% end %>
              </div>
            <% end %>
              
            <!-- ユーザーが保存したカード -->
            <% unless user_bookmarks.empty? %>
              <div class="cards user-bookmarked-cards" id="user-bookmarked-cards">
                <% user_bookmarks.each do |card| %>
                  <div class="card" data-card-id="<%= card.id %>">
                    <div class="card-id" style="display:none;"><%= card.id %></div>
                    <div class="card-body">
                      <% if card.image.attached? %>
                        <%= image_tag card.image, style: "width: 100%; height: auto;" %> <!-- 画像があればここで表示 -->
                      <% else %>
                        <%= card.content %> <!-- 画像がなければコンテンツを表示 -->
                      <% end %>
                    </div>
                    <div class="card-bottom">
                      <div class="like">
                        <% if !card.likes.find_by(user: current_user) %>
                          <%= render 'shared/svg/like' %>
                        <% else %>
                          <%= render 'shared/svg/liked' %>
                        <% end %>
                      </div>
                      <div class="like-count"><%= card.likes.count %></div>
                      <div class="bookmark">
                        <% if !card.bookmarks.find_by(user: current_user) %>
                          <%= render 'shared/svg/bookmark' %>
                        <% else %>
                          <%= render 'shared/svg/bookmarked' %>
                        <% end %>
                      </div>
                      <div class="bookmark-count"><%= card.bookmarks.count %></div>
                    </div>
                  </div>
                <% end %>
              </div>
            <% end %>

            <!-- カード検索 -->
            <div class="cards user-search-cards" id="user-search-cards">
              <%= form_with url: search_questions_path, method: :get, class: 'search-form' do |form| %>
                <%= form.text_area :query, id: 'searchQuery', placeholder: '質問を入力して下さい。', class: 'search-textarea' %>
              <% end %>
              <div class="search-results"></div>

                <div class="circle camera-circle input-circle">
                  <%= render 'shared/svg/camera' %>
                </div>
                <div class="circle image-circle input-circle">
                  <%= render 'shared/svg/image' %>
                  <input type="file" id="imageInputSearch" class="image-input-search" style="display: none;" accept="image/*">
                </div>

            </div>
          </div>
        <% else %>
          <%= render 'shared/auth_buttons', text: "自分がした質問や保存した質問を閲覧できます。" %>
        <% end %>
      </div>
      <div class="modal-footer">
        <div class="bottom-container">
          <div class="bottom-circles">
            <!-- こちらに円を追加します -->  
            <div class="circle1 circle option-circle" data-category="all">
              <%= render 'shared/svg/menu/home' %>
            </div>
            <div class="circle2 circle option-circle" data-category="user">
              <%= render 'shared/svg/menu/user' %>
            </div>
            <div class="circle3 circle option-circle" data-category="user-liked">
              <%= render 'shared/svg/menu/like' %>
            </div>
            <div class="circle4 circle option-circle" data-category="user-bookmarked">
              <%= render 'shared/svg/menu/bookmark' %>
            </div>
            <div class="circle5 circle option-circle search-circle" data-category="user-search">
              <%= render 'shared/svg/menu/search' %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
@media only screen and (max-width: 425px) {
    .cards-panel-modal-body {
        padding: 0; /* モーダルコンテンツの高さを画面高さに合わせる */
    }

    /* カードのスタイル調整 */
    .cards-panel-modal-body .cards .card {
        height: 300px;
    }

    .card-body {
        padding: 10px; /* カード内部のパディングを設定 */
    }

    /* テキストエリアとボタンのスタイル調整 */
    .user-search-cards .search-textarea {
        left: 5px;
        right: 5px;
        margin: 10px auto; /* テキストエリアの上下の余白を設定 */
    }

    .bottom-container .bottom-circles .circle {
        width: 15vw;
        height: 15vw;
    }

    .user-search-cards .input-circle {
      right: 8vw;
      width: 15vw;
      height: 15vw;
      margin: 0;
    }

    .instagramModal .bottom-container {
        display: flex;
        align-items: center;
        justify-content: center;  /* 追加: 子要素を左寄せ */
        width: 100%;
    }
}



.search-results {
  margin-top: 80px;
}

.search-textarea {
  position: fixed;
  background-color: transparent; /* 背景を透明に */
  border: 1px solid white; /* 境界線を削除 */
  outline: none; /* フォーカス時のアウトラインを削除 */
  box-shadow: none; /* 影を削除 */
  border-radius: 10px;
  resize: none;
  z-index: 10000;
  max-height: 700px;
  left: 80px;
  right: 80px;
}
.search-textarea::placeholder {
  color: white;
}
.bottom-container {
    display: flex;
    align-items: center;
    justify-content: end;  /* 追加: 子要素を左寄せ */
    width: 100%;
}

.bottom-circles {
    display: flex;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    -webkit-overflow-scrolling: touch;
    scroll-padding: 50%;
    scrollbar-width: none;
    -ms-overflow-style: none;
    
    &::-webkit-scrollbar {
        display: none;
    }
}

.circle {
    flex: 0 0 auto;
    width: 100px;
    height: 100px;
    background-color: transparent;
    border-radius: 50%;
    margin: 0 5px;
    scroll-snap-align: top;
    transition: background-color 0.3s ease;
    cursor: pointer;
    position: relative; /* 追加 */
}

.circle svg {
    position: absolute; /* 絶対位置指定 */
    top: 50%; /* 上部から50%の位置 */
    left: 50%; /* 左から50%の位置 */
    transform: translate(-50%, -50%); /* 中央に配置 */
    width: 60%; /* SVGのサイズ（必要に応じて調整） */
    height: 60%; /* SVGのサイズ（必要に応じて調整） */
}

.circle:hover {
    background-color: #FFFCF3; /* マウスが乗ったときの背景色 */
    transition: background-color 0.3s ease; /* 背景色変更のアニメーション */
}

/* 通常状態でのSVGの線の色 */
.circle svg path {
    stroke: white; /* デフォルトは白色 */
    transition: stroke 0.3s ease; /* 線の色変更のアニメーション */
}

/* マウスが乗ったときのSVGの線の色 */
.circle:hover svg path {
    stroke: black; /* マウスが乗ったときは黒色 */
}

.circle.active {
    background-color: #FFFCF3; /* アクティブなときの背景色 */
    /* 必要に応じて他のスタイルを追加 */
}

.circle.active svg path {
    stroke: black; /* アクティブなときのSVGの線の色 */
}

.add-btn {
    flex: 0 0 auto;
    width: 100px;
    height: 100px;
    background-color: black;
    border-radius: 50%;
    margin-right: 10px;
    cursor: pointer;
    font-size: 24px;
    font-weight: bold;
    color: white;
    text-align: center;
}

.cards-panel {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-flow: column;
}

/* デフォルトのカードスタイル */
.cards .card {
  height: 500px;
  width: 100vw;
  background-color: transparent; /* 既定の背景色 */
  color: white;
  transition: background-color 0.3s ease; /* 背景色の変更を滑らかに */
  border: 1px solid white;
  border-radius: 50px;
}

/* カードにホバー（PC）またはタッチ（スマホ）したときのスタイル */ 
.cards .card:hover, 
.cards .card:active {
    background-color: #F3F6FF; /* 背景を透明に */
    color: black;
}

.card-body {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
}

.card-bottom {
  display: flex;
  justify-content: end;
  position: absolute;
  bottom: 0;
  right: 0;
  height: 40px;
  margin-right: 20px;
  margin-bottom: 10px;
}

.invisible {
  visibility: hidden;
  position: absolute;
}

.input-circle {
  position: fixed;
  bottom: 0;
  right: 0;
  margin: 0 20px 5px 0;
  visibility: hidden;
}

@keyframes moveUpAndRotateImage {
  0% {
    transform: translateY(0) rotate(0deg);
    visibility: hidden;
    opacity: 0;
  }
  100% {
    transform: translateY(-115px) rotate(360deg); /* 位置と回転を設定 */
    visibility: visible;
    opacity: 1;
  }
}

/* カメラアイコンのための別のキーフレームアニメーション */
@keyframes moveUpAndRotateCamera {
  0% {
    transform: translateY(0) rotate(0deg);
    visibility: hidden;
    opacity: 0;
  }
  100% {
    transform: translateY(-220px) rotate(360deg);
    visibility: visible;
    opacity: 1;
  }
}

/* アニメーションがトリガーされたときの赤い円の状態 */
.image-circle.move-up {
  animation: moveUpAndRotateImage 0.5s forwards; /* アニメーションの適用 */
}

.camera-circle.move-up {
  animation: moveUpAndRotateCamera 0.5s forwards;
}
</style>

<script>
document.addEventListener('turbolinks:load', () => {
  const optionCircles = document.querySelectorAll('.option-circle');
  const circle5 = document.querySelector('.search-circle');
  const inputCircle = document.querySelectorAll('.input-circle');

    console.log(circle5)
  circle5.addEventListener('click', () => {
    console.log("OK")
    inputCircle.forEach(circle => {
      circle.classList.add('move-up');
    });
  });

  optionCircles.forEach(circle => {
    circle.addEventListener('click', () => {
      if (circle5.style.visibility == 'visible' && circle !== circle5)
      {
        circle5.classList.remove('move-up');
      }
    });
  });

  const searchQuery = document.querySelector('.search-textarea');
  const firstHeight = '52';
  let lastHeight = firstHeight; // 初期値をfirstHeightに設定

  // inputイベント時の高さ調整
  searchQuery.addEventListener('input', adjustHeight);

  // 初期ロード時の高さ調整
  adjustHeight();

  // textarea以外の部分がクリックされた時の挙動
  document.body.addEventListener('click', function(e) {
      if (!e.target.closest('#searchQuery') || e.target.closest('#searchQuery') == null) {
        // searchQuery.style.height = 'auto';
        searchQuery.style.height = firstHeight + 'px';
      }
  });

  // textareaにフォーカスが当たった時の挙動
  searchQuery.addEventListener('focus', function() {
    if (searchQuery.value === "") { // 入力内容が空の場合
      // searchQuery.style.height = 'auto';
      searchQuery.style.height = firstHeight + 'px'; // 初期の高さに設定
    } else {
      // searchQuery.style.height = 'auto';
      searchQuery.style.height = lastHeight + 'px';
    }
  });

  // textareaのclickイベントでbodyのclickイベントをキャンセル
  searchQuery.addEventListener('click', function(e) {
      e.stopPropagation();
  });

  // textareaの高さを調整する関数
  function adjustHeight() {
      // searchQuery.style.height = 'auto';
      searchQuery.style.height = searchQuery.scrollHeight + 'px';
      lastHeight = searchQuery.scrollHeight;
  }
});

</script>
